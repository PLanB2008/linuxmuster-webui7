// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.session', ['core', 'lmn.common']);

}).call(this);

'use strict';

angular.module('lmn.session').config(function ($routeProvider) {
    $routeProvider.when('/view/lmn/sessionsList', {
        templateUrl: '/lmn_session:resources/partial/sessionsList.html',
        controller: 'LMNSessionsListController'
    });

    $routeProvider.when('/view/lmn/session', {
        templateUrl: '/lmn_session:resources/partial/session.html',
        controller: 'LMNSessionController'
    });
});


'use strict';

angular.module('lmn.session').service('lmnSession', function ($http, $uibModal, $q, $location, messagebox, validation, notify, gettext) {
    var _this = this;

    this.sessions = [];

    this.current = {
        'ID': '',
        'COMMENT': '',
        'participants': []
    };

    this.load = function () {
        var promiseList = [];
        promiseList.push($http.get('/api/lmn/groupmembership/groups').then(function (resp) {
            var groups = resp.data[0];
            _this.classes = groups.filter(function (elt) {
                return elt.type == 'schoolclass';
            });
            _this.classes = _this.classes.filter(function (elt) {
                return elt.membership == true;
            });
        }));

        promiseList.push($http.get('/api/lmn/session/sessions').then(function (resp) {
            if (resp.data.length == 0) {
                _this.sessions = resp.data;
                _this.info.message = gettext("There are no sessions yet. Create a session using the 'New Session' button at the top!");
            } else {
                _this.sessions = resp.data;
            }
        }));

        return $q.all(promiseList).then(function () {
            return [_this.classes, _this.sessions];
        });
    };

    this.start = function (session) {
        _this.current = session;console.warn(_this.current);
        $location.path('/view/lmn/session');
    };

    this.new = function () {
        return messagebox.prompt(gettext('Session Name'), '').then(function (msg) {
            if (!msg.value) {
                return;
            }

            testChar = validation.isValidLinboConf(msg.value);
            if (testChar != true) {
                notify.error(gettext(testChar));
                return;
            }

            return $http.put('/api/lmn/session/sessions/' + msg.value, {}).then(function (resp) {
                notify.success(gettext('Session Created'));
            });
        });
    };

    this.rename = function (sessionID, comment) {
        if (!sessionID) {
            messagebox.show({ title: gettext('No Session selected'), text: gettext('You have to select a session first.'), positive: 'OK' });
            return;
        }

        return messagebox.prompt(gettext('Session Name'), comment).then(function (msg) {
            if (!msg.value) {
                return;
            }

            testChar = validation.isValidLinboConf(msg.value);
            if (testChar != true) {
                notify.error(gettext(testChar));
                return;
            }
            return $http.post('/api/lmn/session/sessions', { action: 'rename-session', session: sessionID, comment: msg.value }).then(function (resp) {
                notify.success(gettext('Session renamed'));
                return msg.value;
            });
        });
    };

    this.kill = function (sessionID, comment) {
        if (!sessionID) {
            messagebox.show({ title: gettext('No session selected'), text: gettext('You have to select a session first.'), positive: 'OK' });
            return;
        }

        return messagebox.show({ text: gettext('Delete Session: ' + comment + ' ?'), positive: gettext('Delete'), negative: gettext('Cancel') }).then(function () {
            return $http.delete('/api/lmn/session/sessions/' + sessionID).then(function (resp) {
                notify.success(gettext(resp.data));
            });
        });
    };

    this.getParticipants = function (session) {
        return $http.get('/api/lmn/session/sessions/' + session).then(function (resp) {
            return resp.data;
        });
    };

    return this;
});


// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.session').controller('LMNSessionController', function($scope, $http, $location, $route, $uibModal, $window, gettext, notify, messagebox, pageTitle, lmFileEditor, lmEncodingMap, filesystem, validation, $rootScope, wait, userPassword, lmnSession) {
    var typeIsArray, validateResult;
    pageTitle.set(gettext('Session'));
    $scope.changeState = false;
    $window.onbeforeunload = function(event) {
      // Confirm before page reload
      return "Eventually not refreshing";
    };
    $scope.$on("$destroy", function() {
      // Avoid confirmation on others controllers
      return $window.onbeforeunload = void 0;
    });
    $scope.$on("$locationChangeStart", function(event) {
      if ($scope.currentSession.ID !== '') {
        if (!confirm(gettext('Do you really want to quit this session ? You can restart it later if you want.'))) {
          event.preventDefault();
          return;
        }
      }
      return $window.onbeforeunload = void 0;
    });
    $scope.translation = {
      addStudent: gettext('Add Student'),
      addClass: gettext('Add Class')
    };
    $scope.sorts = [
      {
        name: gettext('Lastname'),
        fx: function(x) {
          return x.sn + ' ' + x.givenName;
        }
      },
      {
        name: gettext('Login name'),
        fx: function(x) {
          return x.sAMAccountName;
        }
      },
      {
        name: gettext('Firstname'),
        fx: function(x) {
          return x.givenName;
        }
      },
      {
        name: gettext('Email'),
        fx: function(x) {
          return x.mail;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.fields = {
      sAMAccountName: {
        visible: true,
        name: gettext('Userdata')
      },
      transfer: {
        visible: true,
        name: gettext('Transfer')
      },
      examModeSupervisor: {
        visible: true,
        name: gettext('Exam-Supervisor')
      },
      sophomorixRole: {
        visible: false,
        name: gettext('sophomorixRole')
      },
      exammode: {
        visible: true,
        icon: "fa fa-graduation-cap",
        title: gettext('Exam-Mode'),
        checkboxAll: false,
        examBox: true,
        checkboxStatus: false
      },
      wifi: {
        visible: true,
        icon: "fa fa-wifi",
        title: gettext('Wifi-Access'),
        checkboxAll: true,
        checkboxStatus: false
      },
      internet: {
        visible: true,
        icon: "fa fa-globe",
        title: gettext('Internet-Access'),
        checkboxAll: true,
        checkboxStatus: false
      },
      intranet: {
        visible: false,
        icon: "fa fa-server",
        title: gettext('Intranet Access'),
        checkboxAll: true
      },
      webfilter: {
        visible: false,
        icon: "fa fa-filter",
        title: gettext('Webfilter'),
        checkboxAll: true,
        checkboxStatus: false
      },
      printing: {
        visible: true,
        icon: "fa fa-print",
        title: gettext('Printing'),
        checkboxAll: true,
        checkboxStatus: false
      }
    };
    $scope.currentSession = lmnSession.current;
    if ($scope.currentSession.ID === '') {
      $location.path('/view/lmn/sessionsList');
    } else {
      lmnSession.getParticipants(lmnSession.current.ID).then(function(resp) {
        return $scope.participants = resp;
      });
    }
    $scope.setManagementGroup = function(group, participant) {
      var user;
      $scope.changeState = true;
      if (participant[group] === true) {
        group = `no${group}`;
      }
      user = [participant.sAMAccountName];
      return $http.post('/api/lmn/managementgroup', {
        group: group,
        users: user
      }).then(function(resp) {
        notify.success(`Group ${group} changed for ${user[0]}`);
        return $scope.changeState = false;
      });
    };
    $scope.selectAll = function(id) {
      return console.log('later');
    };
    //        if item is 'exammode'
    //            managementgroup = 'exammode_boolean'
    $scope.setManagementGroupAll = function(group) {
      var i, len, new_value, participant, ref, usersList;
      console.log(group);
      $scope.changeState = true;
      usersList = [];
      new_value = !$scope.fields[group].checkboxStatus;
      ref = $scope.participants;
      for (i = 0, len = ref.length; i < len; i++) {
        participant = ref[i];
        participant[group] = new_value;
        usersList.push(participant.sAMAccountName);
      }
      if (new_value === false) {
        group = `no${group}`;
      }
      return $http.post('/api/lmn/managementgroup', {
        group: group,
        users: usersList
      }).then(function(resp) {
        notify.success(`Group ${group} changed for ${usersList.join()}`);
        return $scope.changeState = false;
      });
    };
    $scope.showGroupDetails = function(index, groupType, groupName) {
      return $uibModal.open({
        templateUrl: '/lmn_groupmembership:resources/partial/groupDetails.modal.html',
        controller: 'LMNGroupDetailsController',
        size: 'lg',
        resolve: {
          groupType: function() {
            return groupType;
          },
          groupName: function() {
            return groupName;
          }
        }
      });
    };
    $scope.showRoomDetails = function() {
      return $http.get('/api/lmn/session/userInRoom').then(function(resp) {
        var usersInRoom;
        if (resp.data === 0) {
          return messagebox.show({
            title: gettext('Info'),
            text: gettext('Currenty its not possible to determine your room, try to login into your computer again.'),
            positive: 'OK'
          });
        } else {
          usersInRoom = resp.data;
          return $uibModal.open({
            templateUrl: '/lmn_session:resources/partial/roomDetails.modal.html',
            controller: 'LMNRoomDetailsController',
            size: 'lg',
            resolve: {
              usersInRoom: function() {
                return usersInRoom;
              }
            }
          });
        }
      });
    };
    $scope.findUsers = function(q) {
      return $http.get(`/api/lmn/session/user-search/${q}`).then(function(resp) {
        $scope.users = resp.data;
        return resp.data;
      });
    };
    $scope.findSchoolClasses = function(q) {
      return $http.get(`/api/lmn/session/schoolClass-search/${q}`).then(function(resp) {
        $scope.class = resp.data;
        return resp.data;
      });
    };
    //    $scope.$watch '_.addParticipant', () ->
    //                # console.log $scope._.addParticipant
    //                if $scope._.addParticipant
    //                    if $scope.participants == 'empty'
    //                                $scope.participants = []
    //                    $scope.info.message = ''
    //                    $scope.visible.participanttable = 'show'
    //                    #console.log $scope._.addParticipant
    //                    if $scope._.addParticipant.sophomorixRole is 'student'
    //                        # Add Managementgroups list if missing. This happens when all managementgroup attributes are false, causing the json tree to skip this key
    //                        if not $scope._.addParticipant.MANAGEMENTGROUPS?
    //                                    $scope._.addParticipant.MANAGEMENTGROUPS = []
    //                        #if not $scope._.addParticipant.changed?
    //                        #            $scope._.addParticipant.changed = 'False'
    //                        #if not $scope._.addParticipant.exammode-changed?
    //                        #            $scope._.addParticipant.exammode-changed = 'False'
    //                        $scope.participants.push {"sAMAccountName":$scope._.addParticipant.sAMAccountName,"givenName":$scope._.addParticipant.givenName,"sn":$scope._.addParticipant.sn,
    //                        "sophomorixExamMode":$scope._.addParticipant.sophomorixExamMode,
    //                        "group_webfilter":$scope._.addParticipant.MANAGEMENTGROUPS.webfilter,
    //                        "group_intranetaccess":$scope._.addParticipant.MANAGEMENTGROUPS.intranet,
    //                        "group_printing":$scope._.addParticipant.MANAGEMENTGROUPS.printing,
    //                        "sophomorixStatus":"U","sophomorixRole":$scope._.addParticipant.sophomorixRole,
    //                        "group_internetaccess":$scope._.addParticipant.MANAGEMENTGROUPS.internet,
    //                        "sophomorixAdminClass":$scope._.addParticipant.sophomorixAdminClass,
    //                        "user_existing":true,"group_wifiaccess":$scope._.addParticipant.MANAGEMENTGROUPS.wifi,
    //                        "changed": false, "exammode-changed": false}
    //                    # console.log ($scope.participants)
    //                    $scope._.addParticipant = null

    //    # TODO Figure out how to call the existing watch addParticipant function
    //    $scope.addParticipant = (participant) ->
    //        if participant
    //            if $scope.participants == 'empty'
    //                        $scope.participants = []
    //            $scope.info.message = ''
    //            $scope.visible.participanttable = 'show'
    //            # console.log participant
    //            # Only add Students
    //            if participant.sophomorixRole is 'student'
    //                # Add Managementgroups list if missing. This happens when all managementgroup attributes are false, causing the json tree to skip this key
    //                if not participant.MANAGEMENTGROUPS?
    //                            participant.MANAGEMENTGROUPS = []
    //                #if not participant.changed?
    //                #            participant.changed = 'False'
    //                #if not participant.exammode-changed?
    //                #            participant.exammode-changed = 'False'
    //                # console.log ($scope.participants)
    //                $scope.participants.push {"sAMAccountName":participant.sAMAccountName,"givenName":participant.givenName,"sn":participant.sn,
    //                "sophomorixExamMode":participant.sophomorixExamMode,
    //                "group_webfilter":participant.MANAGEMENTGROUPS.webfilter,
    //                "group_intranetaccess":participant.MANAGEMENTGROUPS.intranet,
    //                "group_printing":participant.MANAGEMENTGROUPS.printing,
    //                "sophomorixStatus":"U","sophomorixRole":participant.sophomorixRole,
    //                "group_internetaccess":participant.MANAGEMENTGROUPS.internet,
    //                "sophomorixAdminClass":participant.sophomorixAdminClass,
    //                "user_existing":true,"group_wifiaccess":participant.MANAGEMENTGROUPS.wifi,
    //                "changed": false, "exammode-changed": false}
    //            participant = null

    //    $scope.$watch '_.addSchoolClass', () ->
    //        if $scope._.addSchoolClass
    //            members = $scope._.addSchoolClass.members
    //            for schoolClass,member of $scope._.addSchoolClass.members
    //                $scope.addParticipant(member)
    //            $scope._.addSchoolClass = null
    $scope.removeParticipant = function(participant) {
      var deleteIndex;
      deleteIndex = $scope.participants.indexOf(participant);
      if (deleteIndex !== -1) {
        return $scope.participants.splice(deleteIndex, 1);
      }
    };
    $scope.changeExamSupervisor = function(participant, supervisor) {
      return $http.post('/api/lmn/session/sessions', {
        action: 'change-exam-supervisor',
        supervisor: supervisor,
        participant: participant
      }).then(function(resp) {});
    };
    $scope.endExam = function(participant, supervisor, session, sessionName) {
      return $http.patch(`/api/lmn/session/exam/${sessionName}`, {
        supervisor: supervisor,
        participant: participant
      }).then(function(resp) {
        return $scope.getParticipants(session);
      });
    };
    $scope.saveApply = function(username, participants, session, sessionName) {
      wait.modal(gettext('Changes are applied...'), 'progressbar');
      return $http.post('/api/lmn/session/sessions', {
        action: 'save-session',
        username: username,
        participants: participants,
        session: session,
        sessionName: sessionName
      }).then(function(resp) {
        // emit process is done
        $rootScope.$emit('updateWaiting', 'done');
        $scope.output = resp.data;
        $scope.getParticipants(session);
        return notify.success(gettext($scope.output));
      });
    };
    $scope.cancel = function(username, participants, session) {
      $scope.getSessions();
      $scope.sessionLoaded = false;
      $scope.info.message = '';
      $scope.participants = '';
      $scope.currentSession.name = '';
      $scope.currentSession.comment = '';
      return $scope.visible.participanttable = 'none';
    };
    $scope._checkExamUser = function(username) {
      if (username.endsWith('-exam')) {
        messagebox.show({
          title: gettext('User in exam'),
          text: gettext('This user seems to be in exam. End exam mode before changing password!'),
          positive: 'OK'
        });
        return true;
      }
      return false;
    };
    $scope.showFirstPassword = function(username) {
      $scope.blurred = true;
      // if user is exam user show InitialPassword of real user
      username = username.replace('-exam', '');
      return userPassword.showFirstPassword(username).then(function(resp) {
        return $scope.blurred = false;
      });
    };
    $scope.resetFirstPassword = function(username) {
      if (!$scope._checkExamUser(username)) {
        return userPassword.resetFirstPassword(username);
      }
    };
    $scope.setRandomFirstPassword = function(username) {
      if (!$scope._checkExamUser(username)) {
        return userPassword.setRandomFirstPassword(username);
      }
    };
    $scope.setCustomPassword = function(user, pwtype) {
      if (!$scope._checkExamUser(user.sAMAccountName)) {
        return userPassword.setCustomPassword(user, pwtype);
      }
    };
    $scope.userInfo = function(user) {
      console.log(user);
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user;
          },
          role: function() {
            return 'students';
          }
        }
      });
    };
    typeIsArray = Array.isArray || function(value) {
      return {}.toString.call(value) === '[object Array]';
    };
    validateResult = function(resp) {
      if (resp['data'][0] === 'ERROR') {
        notify.error(resp['data'][1]);
      }
      if (resp['data'][0] === 'LOG') {
        return notify.success(gettext(resp['data'][1]));
      }
    };
    $scope.shareTrans = function(command, senders, receivers, sessioncomment) {
      var bulkMode, i, len, participantsArray, receiver;
      // When share with session we get the whole session as an array.
      // The function on the other hand waits for an array containing just the  usernames so we extract
      // these into an array
      // If share option is triggered with just one user we get this user  as a string. If so we also have
      // to put it in an array
      bulkMode = 'false';
      participantsArray = [];
      if (typeIsArray(receivers)) {
        bulkMode = 'true';
        for (i = 0, len = receivers.length; i < len; i++) {
          receiver = receivers[i];
          participantsArray.push(receiver['sAMAccountName']);
        }
      } else {
        participantsArray.push(receivers);
      }
      receivers = participantsArray;
      return $uibModal.open({
        templateUrl: '/lmn_session:resources/partial/selectFile.modal.html',
        controller: 'LMNSessionFileSelectModalController',
        resolve: {
          action: function() {
            return 'share';
          },
          bulkMode: function() {
            return bulkMode;
          },
          senders: function() {
            return senders;
          },
          receivers: function() {
            return receivers;
          },
          command: function() {
            return command;
          },
          sessionComment: function() {
            return sessioncomment;
          }
        }
      }).result.then(function(result) {
        if (result.response === 'accept') {
          wait.modal(gettext('Sharing files...'), 'progressbar');
          return $http.post('/api/lmn/session/trans', {
            command: command,
            senders: senders,
            receivers: receivers,
            files: result.files,
            session: sessioncomment
          }).then(function(resp) {
            $rootScope.$emit('updateWaiting', 'done');
            console.log(resp);
            return validateResult(resp);
          });
        }
      });
    };
    $scope.collectTrans = function(command, senders, receivers, sessioncomment) {
      var bulkMode, participantsArray, transTitle;
      // When collect from session we already get the users in an array containing the user objects.
      // If collect option is triggered with just on use we get this user as an object. If so we also
      // have to put it in an array.
      //console.log (command)
      //console.log (senders)
      bulkMode = 'false';
      participantsArray = [];
      if (typeIsArray(senders)) {
        bulkMode = 'true';
      } else {
        participantsArray.push(senders);
        senders = participantsArray;
      }
      transTitle = 'transfer';
      //console.log (bulkMode)
      return $uibModal.open({
        templateUrl: '/lmn_session:resources/partial/selectFile.modal.html',
        controller: 'LMNSessionFileSelectModalController',
        resolve: {
          action: function() {
            return 'collect';
          },
          bulkMode: function() {
            return bulkMode;
          },
          senders: function() {
            return senders;
          },
          receivers: function() {
            return receivers;
          },
          command: function() {
            return command;
          },
          sessionComment: function() {
            return sessioncomment;
          }
        }
      }).result.then(function(result) {
        if (result.response === 'accept') {
          //return
          wait.modal(gettext('Collecting files...'), 'progressbar');
          if (command === 'copy') {
            $http.post('/api/lmn/session/trans', {
              command: command,
              senders: senders,
              receivers: receivers,
              files: result.files,
              session: sessioncomment
            }).then(function(resp) {
              $rootScope.$emit('updateWaiting', 'done');
              return validateResult(resp);
            });
          }
          if (command === 'move') {
            return $http.post('/api/lmn/session/trans', {
              command: command,
              senders: senders,
              receivers: receivers,
              files: result.files,
              session: sessioncomment
            }).then(function(resp) {
              $rootScope.$emit('updateWaiting', 'done');
              return validateResult(resp);
            });
          }
        }
      });
    };
    $scope.notImplemented = function(user) {
      return messagebox.show({
        title: gettext('Not implemented'),
        positive: 'OK'
      });
    };
    // Websession part
    $scope.getWebConferenceEnabled = function() {
      return $http.get('/api/lmn/websession/webConferenceEnabled').then(function(resp) {
        if (resp.data === true) {
          $scope.websessionEnabled = true;
          return $scope.websessionGetStatus();
        } else {
          return $scope.websessionEnabled = false;
        }
      });
    };
    $scope.websessionIsRunning = false;
    $scope.websessionGetStatus = function() {
      var sessionname;
      sessionname = $scope.currentSession.comment + "-" + $scope.currentSession.name;
      return $http.get(`/api/lmn/websession/webConference/${sessionname}`).then(function(resp) {
        if (resp.data["status"] === "SUCCESS") {
          if (resp.data["data"]["status"] === "started") {
            $scope.websessionIsRunning = true;
          } else {
            $scope.websessionIsRunning = false;
          }
          $scope.websessionID = resp.data["data"]["id"];
          $scope.websessionAttendeePW = resp.data["data"]["attendeepw"];
          return $scope.websessionModeratorPW = resp.data["data"]["moderatorpw"];
        } else {
          return $scope.websessionIsRunning = false;
        }
      });
    };
    $scope.websessionToggle = function() {
      if ($scope.websessionIsRunning === false) {
        return $scope.websessionStart();
      } else {
        return $scope.websessionStop();
      }
    };
    $scope.websessionStop = function() {
      return $http.post('/api/lmn/websession/endWebConference', {
        id: $scope.websessionID,
        moderatorpw: $scope.websessionModeratorPW
      }).then(function(resp) {
        return $http.delete(`/api/lmn/websession/webConference/${$scope.websessionID}`).then(function(resp) {
          if (resp.data["status"] === "SUCCESS") {
            notify.success(gettext("Successfully stopped!"));
            return $scope.websessionIsRunning = false;
          } else {
            return notify.error(gettext('Cannot stop entry!'));
          }
        });
      });
    };
    return $scope.websessionStart = function() {
      var i, len, participant, ref, tempparticipants;
      tempparticipants = [];
      ref = $scope.participants;
      for (i = 0, len = ref.length; i < len; i++) {
        participant = ref[i];
        tempparticipants.push(participant.sAMAccountName);
      }
      return $http.post('/api/lmn/websession/webConferences', {
        sessionname: $scope.currentSession.comment + "-" + $scope.currentSession.name,
        sessiontype: "private",
        sessionpassword: "",
        participants: tempparticipants
      }).then(function(resp) {
        if (resp.data["status"] === "SUCCESS") {
          $scope.websessionID = resp.data["id"];
          $scope.websessionAttendeePW = resp.data["attendeepw"];
          $scope.websessionModeratorPW = resp.data["moderatorpw"];
          return $http.post('/api/lmn/websession/startWebConference', {
            sessionname: $scope.currentSession.comment + "-" + $scope.currentSession.name,
            id: $scope.websessionID,
            attendeepw: $scope.websessionAttendeePW,
            moderatorpw: $scope.websessionModeratorPW
          }).then(function(resp) {
            if (resp.data["returncode"] === "SUCCESS") {
              return $http.post('/api/lmn/websession/joinWebConference', {
                id: $scope.websessionID,
                password: $scope.websessionModeratorPW,
                name: $scope.identity.profile.sn + ", " + $scope.identity.profile.givenName
              }).then(function(resp) {
                $scope.websessionIsRunning = true;
                return window.open(resp.data, '_blank');
              });
            } else {
              notify.error(gettext('Cannot start websession! Try to reload page!'));
              return console.log(resp.data);
            }
          });
        } else {
          return notify.error(gettext("Create session failed! Try again later!"));
        }
      });
    };
  });

  // Websession part
  angular.module('lmn.session').controller('LMNRoomDetailsController', function($scope, $route, $uibModal, $uibModalInstance, $http, gettext, notify, messagebox, pageTitle, usersInRoom) {
    $scope.usersInRoom = usersInRoom;
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lmn.session').controller('LMNSessionFileSelectModalController', function($scope, $uibModalInstance, gettext, notify, $http, bulkMode, senders, receivers, action, command, sessionComment, messagebox) {
    $scope.bulkMode = bulkMode;
    $scope.senders = senders;
    $scope.receivers = receivers;
    $scope.action = action;
    $scope.command = command;
    $scope.setTransferPath = function(username) {
      var role, school;
      role = $scope.identity.profile.sophomorixRole;
      school = $scope.identity.profile.activeSchool;
      $scope.transferPath = '/srv/webuiUpload/' + school + '/' + role + '/' + username + '/';
      // create tmp dir for upload
      $scope.createDir($scope.transferPath);
      return $scope.owner = username;
    };
    $scope.save = function() {
      var filesToTrans;
      filesToTrans = [];
      angular.forEach($scope.files['TREE'], function(file, id) {
        if (file['checked'] === true) {
          return filesToTrans.push(id);
        }
      });
      if (filesToTrans.length === 0) {
        notify.info(gettext('Please select at least one file!'));
        return;
      }
      return $uibModalInstance.close({
        response: 'accept',
        files: filesToTrans,
        bulkMode: bulkMode
      });
    };
    $scope.saveBulk = function() {
      return $uibModalInstance.close({
        response: 'accept',
        files: 'All',
        bulkMode: bulkMode
      });
    };
    $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
    $scope.share = function() {
      return $http.post('/api/lmn/session/trans-list-files', {
        user: senders[0]
      }).then(function(resp) {
        $scope.files = resp['data'][0];
        return $scope.filesList = resp['data'][1];
      });
    };
    $scope.collect = function() {
      if (bulkMode === 'false') {
        console.log(receivers[0]);
        console.log(sessionComment);
        return $http.post('/api/lmn/session/trans-list-files', {
          user: senders,
          subfolderPath: receivers[0] + '_' + sessionComment
        }).then(function(resp) {
          $scope.files = resp['data'][0];
          return $scope.filesList = resp['data'][1];
        });
      }
    };
    $scope.createDir = function(path) {
      return $http.post('/api/lmn/create-dir', {
        filepath: path
      });
    };
    $scope.removeFile = function(file) {
      var path, role, school;
      role = $scope.identity.profile.sophomorixRole;
      school = $scope.identity.profile.activeSchool;
      path = $scope.identity.profile.homeDirectory + '\\transfer\\' + file;
      return messagebox.show({
        text: gettext('Are you sure you want to delete permanently the file ' + file + '?'),
        positive: gettext('Delete'),
        negative: gettext('Cancel')
      }).then(function() {
        return $http.post('/api/lmn/smbclient/unlink', {
          path: path
        }).then(function(resp) {
          var pos;
          notify.success(gettext("File " + file + " removed"));
          delete $scope.files['TREE'][file];
          $scope.files['COUNT']['files'] = $scope.files['COUNT']['files'] - 1;
          pos = $scope.filesList.indexOf(file);
          return $scope.filesList.splice(pos, 1);
        });
      });
    };
    $scope.removeDir = function(file) {
      var path, role, school;
      role = $scope.identity.profile.sophomorixRole;
      school = $scope.identity.profile.activeSchool;
      path = '/srv/samba/schools/' + school + '/' + role + '/' + $scope.identity.user + '/transfer/' + file;
      return messagebox.show({
        text: gettext('Are you sure you want to delete permanently this directory and its content: ' + file + '?'),
        positive: gettext('Delete'),
        negative: gettext('Cancel')
      }).then(function() {
        return $http.post('/api/lmn/remove-dir', {
          filepath: path
        }).then(function(resp) {
          var pos;
          notify.success(gettext("Directory " + file + " removed"));
          delete $scope.files['TREE'][file];
          $scope.files['COUNT']['files'] = $scope.files['COUNT']['files'] - 1;
          pos = $scope.filesList.indexOf(file);
          return $scope.filesList.splice(pos, 1);
        });
      });
    };
    $scope.setTransferPath($scope.identity.user);
    if (action === 'share') {
      return $scope.share();
    } else {
      return $scope.collect();
    }
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.session').controller('LMNSessionsListController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, lmFileEditor, lmEncodingMap, filesystem, validation, $rootScope, wait, lmnSession) {
    pageTitle.set(gettext('Sessions list'));
    $scope.generateSessionMouseover = gettext('Regenerate this session');
    $scope.startGeneratedSessionMouseover = gettext('Start this session unchanged (may not be up to date)');
    $scope.generateRoomsessionMouseover = gettext('Start session containing all users in this room');
    $scope.checkboxModel = {
      value1: false,
      value2: true
    };
    $scope.visible = {
      participanttable: 'none',
      sessiontable: 'none',
      sessionname: 'none',
      mainpage: 'show'
    };
    $scope.info = {
      message: ''
    };
    $scope._ = {
      addParticipant: null,
      addClass: null
    };
    $scope.resetClass = function() {
      var result;
      result = document.getElementsByClassName("changed");
      while (result.length) {
        result[0].className = result[0].className.replace(/(?:^|\s)changed(?!\S)/g, '');
      }
    };
    $scope.renameSession = function(session) {
      return lmnSession.rename(session.ID, session.COMMENT).then(function(resp) {
        return session.COMMENT = resp;
      });
    };
    $scope.killSession = function(session) {
      return lmnSession.kill(session.ID, session.COMMENT).then(function() {
        var position;
        position = $scope.sessions.indexOf(session);
        return $scope.sessions.splice(position, 1);
      });
    };
    $scope.newSession = function() {
      return lmnSession.new().then(function() {
        return $scope.getSessions();
      });
    };
    $scope.getSessions = function() {
      return lmnSession.load().then(function(resp) {
        $scope.classes = resp[0];
        return $scope.sessions = resp[1];
      });
    };
    $scope.showGroupDetails = function(index, groupType, groupName) {
      return $uibModal.open({
        templateUrl: '/lmn_groupmembership:resources/partial/groupDetails.modal.html',
        controller: 'LMNGroupDetailsController',
        size: 'lg',
        resolve: {
          groupType: function() {
            return groupType;
          },
          groupName: function() {
            return groupName;
          }
        }
      });
    };
    $scope.showRoomDetails = function() {
      return $http.get('/api/lmn/session/userInRoom').then(function(resp) {
        var usersInRoom;
        if (resp.data === 0) {
          return messagebox.show({
            title: gettext('Info'),
            text: gettext('Currenty its not possible to determine your room, try to login into your computer again.'),
            positive: 'OK'
          });
        } else {
          usersInRoom = resp.data;
          return $uibModal.open({
            templateUrl: '/lmn_session:resources/partial/roomDetails.modal.html',
            controller: 'LMNRoomDetailsController',
            size: 'lg',
            resolve: {
              usersInRoom: function() {
                return usersInRoom;
              }
            }
          });
        }
      });
    };
    $scope.getParticipants = function(session) {
      return lmnSession.start(session);
    };
    //        $scope.visible.sessiontable = 'none'
    //        $scope.resetClass()
    //        # Reset select all checkboxes when loading participants
    //        angular.forEach $scope.fields, (field) ->
    //            field.checkboxStatus = false
    //        $http.get("/api/lmn/session/sessions/#{session}").then (resp) ->
    //            $scope.visible.sessionname = 'show'
    //            $scope.filter = ''
    //            $scope.visible.mainpage = 'none'
    //            $scope.participants = resp.data
    //            if $scope.participants == 'empty'
    //               $scope.visible.participanttable = 'none'
    //               $scope.info.message = gettext('This session appears to be empty. Start adding users by using the top search bar!')
    //            else
    //                $scope.info.message = ''
    //                $scope.visible.participanttable = 'show'
    $scope.generateRoomSession = function() {
      return $http.get('/api/lmn/session/userInRoom').then(function(resp) {
        var i, len, ref, session, sessionComment, sessionExist, sessionID, usersInRoom;
        if (resp.data === 0) {
          return messagebox.show({
            title: gettext('Info'),
            text: gettext('Currenty its not possible to determine your room, try to login into your computer again.'),
            positive: 'OK'
          });
        } else {
          usersInRoom = resp.data.usersList;
          sessionComment = 'room-autoGenerated';
          sessionExist = false;
          ref = $scope.sessions;
          for (i = 0, len = ref.length; i < len; i++) {
            session = ref[i];
            if (sessionComment === session['COMMENT']) {
              sessionExist = true;
              sessionID = session['ID'];
              console.log('sessionExist ' + sessionExist);
            }
          }
          wait.modal(gettext('Generating session...'), 'spinner');
          return $scope.generateSession(usersInRoom, sessionID, sessionComment, sessionExist);
        }
      });
    };
    $scope.regenerateSession = function(classname) {
      var i, len, ref, session, sessionComment, sessionExist, sessionID;
      console.warn("Regenerate called");
      sessionComment = classname + '-autoGenerated';
      sessionExist = false;
      ref = $scope.sessions;
      for (i = 0, len = ref.length; i < len; i++) {
        session = ref[i];
        if (sessionComment === session['COMMENT']) {
          sessionExist = true;
          sessionID = session['ID'];
          console.log('sessionExist ' + sessionExist);
        }
      }
      wait.modal(gettext('Generating session...'), 'spinner');
      return $http.get('/api/lmn/groupmembership/groups/' + classname).then(function(resp) {
        var data, participant, participants, participantsArray;
        // get participants from specified class
        participants = resp.data['MEMBERS'][classname];
        participantsArray = [];
        for (participant in participants) {
          data = participants[participant];
          if (participants[participant]['sophomorixRole'] !== 'teacher') {
            participantsArray.push(participant);
          }
        }
        //$rootScope.$emit('updateWaiting', 'done')
        return $scope.generateSession(participantsArray, sessionID, sessionComment, sessionExist);
      });
    };
    $scope.generateSession = function(participants, sessionID, sessionComment, sessionExist) {
      //wait.modal(gettext('Generating session...'), 'spinner')
      // fix existing session
      console.warn("generate called");
      if (sessionExist === true) {
        $http.post('/api/lmn/session/sessions', {
          action: 'update-session',
          username: $scope.identity.user,
          sessionID: sessionID,
          participants: participants
        }).then(function(resp) {
          // emit wait process is done
          $rootScope.$emit('updateWaiting', 'done');
          // refresh Session table
          notify.success(gettext('Session generated'));
          // open new created session
          $scope.currentSession.name = sessionID;
          $scope.currentSession.comment = sessionComment;
          return $scope.getParticipants(sessionID);
        });
      }
      // create new session
      if (sessionExist === false) {
        // create new specified session
        return $http.put(`/api/lmn/session/sessions/${sessionComment}`, {
          participants: participants
        }).then(async function(resp) {
          var i, len, ref, session;
          // emit wait process is done
          $rootScope.$emit('updateWaiting', 'done');
          await $scope.getSessions();
          notify.success(gettext('Session generated'));
          ref = $scope.sessions;
          // get new created sessionID
          for (i = 0, len = ref.length; i < len; i++) {
            session = ref[i];
            if (sessionComment === session['COMMENT']) {
              sessionID = session['ID'];
            }
          }
          // open new created session
          $scope.currentSession.name = sessionID;
          $scope.currentSession.comment = sessionComment;
          $scope.getParticipants(sessionID);
          return $scope.getWebConferenceEnabled();
        });
      }
    };
    return $scope.$watch('identity.user', function() {
      if ($scope.identity.user === void 0) {
        return;
      }
      if ($scope.identity.user === null) {
        return;
      }
      if ($scope.identity.user === 'root') {
        return;
      }
      return $scope.getSessions();
    });
  });

  angular.module('lmn.session').controller('LMNRoomDetailsController', function($scope, $route, $uibModal, $uibModalInstance, $http, gettext, notify, messagebox, pageTitle, usersInRoom) {
    $scope.usersInRoom = usersInRoom;
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

}).call(this);

