// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users', ['core', 'lm.common']);

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/students-list', {
      controller: 'LMUsersStudentsListController',
      templateUrl: '/lmn_users:resources/partial/students-list.html'
    });
  });

  angular.module('lm.users').controller('LMUsersStudentsListController', function($scope, $http, $location, $route, $uibModal, gettext, notify, lmEncodingMap, messagebox, pageTitle, lmFileEditor, lmFileBackups, filesystem) {
    pageTitle.set(gettext('Students'));
    $scope.sorts = [
      {
        name: gettext('Class'),
        fx: function(x) {
          return x.class;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Student ID'),
        fx: function(x) {
          return x.id;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 100
    };
    $scope.fields = {
      class: {
        visible: true,
        name: gettext('Class')
      },
      last_name: {
        visible: true,
        name: gettext('Last Name')
      },
      first_name: {
        visible: true,
        name: gettext('First Name')
      },
      birthday: {
        visible: true,
        name: gettext('Birthday')
      },
      id: {
        visible: false,
        name: gettext('Student ID')
      }
    };
    $scope.first_save = false;
    $scope.validateField = function(name, val, isnew) {
      var valid;
      valid = $scope["isValid" + name](val) && val;
      if (valid) {
        return "";
      }
      if (isnew && !$scope.first_save) {
        return "has-error-new";
      } else {
        return "has-error";
      }
    };
    $scope.findval = function(attr, val) {
      return function(dict) {
        return dict[attr] === val;
      };
    };
    $scope.isValidClass = function(cl) {
      var regExp, validClass;
      regExp = /^([0-9a-zA-Z]*)$/;
      validClass = regExp.test(cl);
      return true; //# TODO : valid chars for a classname ?
    };
    $scope.isValidName = function(name) {
      var regExp, validName;
      regExp = /^([0-9a-zA-Z]*)$/;
      validName = regExp.test(name);
      return true; //# TODO : valid chars for a name ?
    };
    $scope.isValidBirthday = function(birthday) {
      var regExp, validBirthday;
      regExp = /^(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|20)\d\d$/; //# Not perfect : allows 31.02.1920, but not so important
      validBirthday = regExp.test(birthday);
      return validBirthday;
    };
    $scope.add = function() {
      if ($scope.students.length > 0) {
        $scope.paging.page = Math.floor(($scope.students.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.filter = '';
      return $scope.students.push({
        '_isNew': true,
        'first_name': '',
        'last_name': '',
        'class': ''
      });
    };
    $http.get('/api/lm/schoolsettings').then(function(resp) {
      var school;
      school = 'default-school';
      $scope.encoding = resp.data["userfile.students.csv"].encoding;
      if ($scope.encoding === 'auto') {
        $http.post('/api/lmn/schoolsettings/determine-encoding', {
          path: '/etc/linuxmuster/sophomorix/' + school + '/students.csv'
        }).then(function(response) {
          if (response.data === 'unknown') {
            return $scope.encoding = 'utf-8';
          } else {
            return $scope.encoding = response.data;
          }
        });
      }
      return $http.get(`/api/lm/users/students-list?encoding=${$scope.encoding}`).then(function(resp) {
        return $scope.students = resp.data;
      });
    });
    $scope.remove = function(student) {
      return $scope.students.remove(student);
    };
    $scope.editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/students.csv', $scope.encoding).then(function() {
        return $route.reload();
      });
    };
    $scope.numErrors = function() {
      return document.getElementsByClassName("has-error").length + document.getElementsByClassName("has-error-new").length > 0;
    };
    $scope.save = function() {
      if ($scope.numErrors()) {
        $scope.first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lm/users/students-list?encoding=${$scope.encoding}`, $scope.students).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.saveAndCheck = function() {
      return $scope.save().then(function() {
        return $uibModal.open({
          templateUrl: '/lmn_users:resources/partial/check.modal.html',
          controller: 'LMUsersCheckModalController',
          backdrop: 'static'
        });
      });
    };
    $scope.confirmUpload = function() {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/upload.modal.html',
        controller: 'LMUsersUploadModalController',
        backdrop: 'static',
        resolve: {
          userlist: function() {
            return 'students.csv';
          }
        }
      });
    };
    return $scope.backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/students.csv', $scope.encoding);
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/teachers', {
      controller: 'LMUsersTeachersController',
      templateUrl: '/lmn_users:resources/partial/teachers.html'
    });
  });

  angular.module('lm.users').controller('LMUsersTeachersController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, lmFileEditor, lmEncodingMap) {
    pageTitle.set(gettext('Teachers'));
    $scope.sorts = [
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.givenName;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.sn;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.sAMAccountName;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.sophomorixBirthdate;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $http.post('/api/lm/sophomorixUsers/teachers', {
      action: 'get-all'
    }).then(function(resp) {
      return $scope.teachers = resp.data;
    });
    $scope.showInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'get'
      }).then(function(resp) {
        return $http.post('/api/lm/users/test-first-password/' + user[0]['sAMAccountName']).then(function(response) {
          var msg;
          if (response.data === true) {
            msg = gettext('Initial password (still set)');
          } else {
            msg = gettext('Initial password (changed from user)');
          }
          return messagebox.show({
            title: msg,
            text: resp.data,
            positive: 'OK'
          });
        });
      });
    };
    $scope.setInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-initial'
      }).then(function(resp) {
        return notify.success(gettext('Initial password set'));
      });
    };
    $scope.setRandomPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-random'
      }).then(function(resp) {
        return notify.success(gettext('Random password set'));
      });
    };
    $scope.setCustomPassword = function(user, type) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/customPassword.modal.html',
        controller: 'LMNUsersCustomPasswordController',
        size: 'mg',
        resolve: {
          users: function() {
            return user;
          },
          type: function() {
            return type;
          }
        }
      });
    };
    $scope.userInfo = function(user) {
      console.log(user);
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'teachers';
          }
        }
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.teachers) {
        ref = $scope.teachers;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    $scope.batchSetInitialPassword = function() {
      var x;
      return $scope.setInitialPassword((function() {
        var i, len, ref, results;
        ref = $scope.teachers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetRandomPassword = function() {
      var x;
      return $scope.setRandomPassword((function() {
        var i, len, ref, results;
        ref = $scope.teachers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetCustomPassword = function() {
      var x;
      return $scope.setCustomPassword((function() {
        var i, len, ref, results;
        ref = $scope.teachers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    return $scope.selectAll = function(filter) {
      var i, len, ref, results, teacher;
      if (filter == null) {
        filter = '';
      }
      ref = $scope.teachers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        teacher = ref[i];
        if (filter === void 0) {
          teacher.selected = true;
        }
        if (teacher.sn.toLowerCase().includes(filter.toLowerCase())) {
          teacher.selected = true;
        }
        if (teacher.givenName.toLowerCase().includes(filter.toLowerCase())) {
          teacher.selected = true;
        }
        if (teacher.sophomorixAdminClass.toLowerCase().includes(filter.toLowerCase())) {
          teacher.selected = true;
        }
        if (teacher.sAMAccountName.toLowerCase().includes(filter.toLowerCase())) {
          results.push(teacher.selected = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/students', {
      controller: 'LMUsersStudentsController',
      templateUrl: '/lmn_users:resources/partial/students.html'
    });
  });

  angular.module('lm.users').controller('LMUsersStudentsController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, lmFileEditor, lmEncodingMap) {
    pageTitle.set(gettext('Students'));
    $scope.sorts = [
      {
        name: gettext('Class'),
        fx: function(x) {
          return x.sophomorixAdminClass;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.givenName;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.sn;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.sophomorixBirthdate;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $http.post('/api/lm/sophomorixUsers/students', {
      action: 'get-all'
    }).then(function(resp) {
      return $scope.students = resp.data;
    });
    $scope.showInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'get'
      }).then(function(resp) {
        return $http.post('/api/lm/users/test-first-password/' + user[0]['sAMAccountName']).then(function(response) {
          var msg;
          if (response.data === true) {
            msg = gettext('Initial password (still set)');
          } else {
            msg = gettext('Initial password (changed from user)');
          }
          return messagebox.show({
            title: msg,
            text: resp.data,
            positive: 'OK'
          });
        });
      });
    };
    $scope.setInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-initial'
      }).then(function(resp) {
        return notify.success(gettext('Initial password set'));
      });
    };
    $scope.setRandomPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-random'
      }).then(function(resp) {
        return notify.success(gettext('Random password set'));
      });
    };
    $scope.setCustomPassword = function(user, type) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/customPassword.modal.html',
        controller: 'LMNUsersCustomPasswordController',
        size: 'mg',
        resolve: {
          users: function() {
            return user;
          },
          type: function() {
            return type;
          }
        }
      });
    };
    $scope.userInfo = function(user) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'students';
          }
        }
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.students) {
        ref = $scope.students;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    $scope.batchSetInitialPassword = function() {
      var x;
      return $scope.setInitialPassword((function() {
        var i, len, ref, results;
        ref = $scope.students;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetRandomPassword = function() {
      var x;
      return $scope.setRandomPassword((function() {
        var i, len, ref, results;
        ref = $scope.students;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetCustomPassword = function() {
      var x;
      return $scope.setCustomPassword((function() {
        var i, len, ref, results;
        ref = $scope.students;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    return $scope.selectAll = function(filter) {
      var i, len, ref, results, student;
      if (filter == null) {
        filter = '';
      }
      ref = $scope.students;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        student = ref[i];
        if (filter === void 0) {
          student.selected = true;
        }
        if (student.sn.toLowerCase().includes(filter.toLowerCase())) {
          student.selected = true;
        }
        if (student.givenName.toLowerCase().includes(filter.toLowerCase())) {
          student.selected = true;
        }
        if (student.sophomorixAdminClass.toLowerCase().includes(filter.toLowerCase())) {
          student.selected = true;
        }
        if (student.sAMAccountName.toLowerCase().includes(filter.toLowerCase())) {
          results.push(student.selected = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/schooladmins', {
      controller: 'LMUsersSchooladminsController',
      templateUrl: '/lmn_users:resources/partial/schooladmins.html'
    });
  });

  angular.module('lm.users').controller('LMUsersSchooladminsController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, lmFileEditor, lmEncodingMap) {
    pageTitle.set(gettext('Schooladmins'));
    $scope.sorts = [
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.sAMAccountName;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $http.post('/api/lm/sophomorixUsers/schooladmins', {
      action: 'get-all'
    }).then(function(resp) {
      return $scope.schooladmins = resp.data;
    });
    $scope.showInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'get'
      }).then(function(resp) {
        return $http.post('/api/lm/users/test-first-password/' + user[0]['sAMAccountName']).then(function(response) {
          var msg;
          if (response.data === true) {
            msg = gettext('Initial password (still set)');
          } else {
            msg = gettext('Initial password (changed from user)');
          }
          return messagebox.show({
            title: msg,
            text: resp.data,
            positive: 'OK'
          });
        });
      });
    };
    $scope.setInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-initial'
      }).then(function(resp) {
        return notify.success(gettext('Initial password set'));
      });
    };
    $scope.setRandomPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-random'
      }).then(function(resp) {
        return notify.success(gettext('Random password set'));
      });
    };
    $scope.setCustomPassword = function(user, type) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/customPassword.modal.html',
        controller: 'LMNUsersCustomPasswordController',
        size: 'mg',
        resolve: {
          users: function() {
            return user;
          },
          type: function() {
            return type;
          }
        }
      });
    };
    $scope.deleteSchoolAdmin = function(user) {
      var x;
      return messagebox.show({
        title: gettext('Delete User'),
        text: gettext("Delete school-administrator " + ((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })()) + '?'),
        positive: 'Delete',
        negative: 'Cancel'
      }).then(function() {
        return $http.post('/api/lm/users/change-school-admin', {
          users: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = user.length; i < len; i++) {
              x = user[i];
              results.push(x['sAMAccountName']);
            }
            return results;
          })(),
          action: 'delete'
        }).then(function(resp) {
          $route.reload();
          return notify.success(gettext('User deleted'));
        });
      });
    };
    $scope.addSchoolAdmin = function() {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/addAdmin.modal.html',
        controller: 'LMNUsersAddAdminController',
        size: 'mg',
        resolve: {
          role: function() {
            return 'school-admin';
          }
        }
      });
    };
    $scope.userInfo = function(user) {
      console.log(user);
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'schooladmins';
          }
        }
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.schooladmins) {
        ref = $scope.schooladmins;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    $scope.batchSetInitialPassword = function() {
      var x;
      return $scope.setInitialPassword((function() {
        var i, len, ref, results;
        ref = $scope.schooladmins;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetRandomPassword = function() {
      var x;
      return $scope.setRandomPassword((function() {
        var i, len, ref, results;
        ref = $scope.schooladmins;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetCustomPassword = function() {
      var x;
      return $scope.setCustomPassword((function() {
        var i, len, ref, results;
        ref = $scope.schooladmins;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    return $scope.selectAll = function(filter) {
      var i, len, ref, results, schooladmin;
      if (filter == null) {
        filter = '';
      }
      ref = $scope.schooladmins;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        schooladmin = ref[i];
        if (filter === void 0) {
          schooladmin.selected = true;
        }
        if (schooladmin.sn.toLowerCase().includes(filter.toLowerCase())) {
          schooladmin.selected = true;
        }
        if (schooladmin.givenName.toLowerCase().includes(filter.toLowerCase())) {
          schooladmin.selected = true;
        }
        if (schooladmin.sophomorixAdminClass.toLowerCase().includes(filter.toLowerCase())) {
          schooladmin.selected = true;
        }
        if (schooladmin.sAMAccountName.toLowerCase().includes(filter.toLowerCase())) {
          results.push(schooladmin.selected = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/globaladmins', {
      controller: 'LMUsersGloballadminsController',
      templateUrl: '/lmn_users:resources/partial/globaladmins.html'
    });
  });

  angular.module('lm.users').controller('LMUsersGloballadminsController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, lmFileEditor, lmEncodingMap) {
    pageTitle.set(gettext('Globaladmins'));
    $scope.sorts = [
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.sAMAccountName;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $http.post('/api/lm/sophomorixUsers/globaladmins', {
      action: 'get-all'
    }).then(function(resp) {
      return $scope.globaladmins = resp.data;
    });
    $scope.showInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'get'
      }).then(function(resp) {
        return $http.post('/api/lm/users/test-first-password/' + user[0]['sAMAccountName']).then(function(response) {
          var msg;
          if (response.data === true) {
            msg = gettext('Initial password (still set)');
          } else {
            msg = gettext('Initial password (changed from user)');
          }
          return messagebox.show({
            title: msg,
            text: resp.data,
            positive: 'OK'
          });
        });
      });
    };
    $scope.setInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-initial'
      }).then(function(resp) {
        return notify.success(gettext('Initial password set'));
      });
    };
    $scope.setRandomPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-random'
      }).then(function(resp) {
        return notify.success(gettext('Random password set'));
      });
    };
    $scope.setCustomPassword = function(user, type) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/customPassword.modal.html',
        controller: 'LMNUsersCustomPasswordController',
        size: 'mg',
        resolve: {
          users: function() {
            return user;
          },
          type: function() {
            return type;
          }
        }
      });
    };
    $scope.deleteGlobalAdmin = function(user) {
      var x;
      return messagebox.show({
        title: gettext('Delete User'),
        text: gettext("Delete global-administrator " + ((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })()) + '?'),
        positive: 'Delete',
        negative: 'Cancel'
      }).then(function() {
        return $http.post('/api/lm/users/change-global-admin', {
          users: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = user.length; i < len; i++) {
              x = user[i];
              results.push(x['sAMAccountName']);
            }
            return results;
          })(),
          action: 'delete'
        }).then(function(resp) {
          $route.reload();
          return notify.success(gettext('User deleted'));
        });
      });
    };
    $scope.addGlobalAdmin = function() {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/addAdmin.modal.html',
        controller: 'LMNUsersAddAdminController',
        size: 'mg',
        resolve: {
          role: function() {
            return angular.copy('global-admin');
          }
        }
      });
    };
    $scope.userInfo = function(user) {
      console.log(user);
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'globaladmins';
          }
        }
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.globaladmins) {
        ref = $scope.globaladmins;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    $scope.batchSetInitialPassword = function() {
      var x;
      return $scope.setInitialPassword((function() {
        var i, len, ref, results;
        ref = $scope.globaladmins;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetRandomPassword = function() {
      var x;
      return $scope.setRandomPassword((function() {
        var i, len, ref, results;
        ref = $scope.globaladmins;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetCustomPassword = function() {
      var x;
      return $scope.setCustomPassword((function() {
        var i, len, ref, results;
        ref = $scope.globaladmins;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    return $scope.selectAll = function(filter) {
      var globaladmin, i, len, ref, results;
      if (filter == null) {
        filter = '';
      }
      ref = $scope.globaladmins;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        globaladmin = ref[i];
        if (filter === void 0) {
          globaladmin.selected = true;
        }
        if (globaladmin.sn.toLowerCase().includes(filter.toLowerCase())) {
          globaladmin.selected = true;
        }
        if (globaladmin.givenName.toLowerCase().includes(filter.toLowerCase())) {
          globaladmin.selected = true;
        }
        if (globaladmin.sophomorixAdminClass.toLowerCase().includes(filter.toLowerCase())) {
          globaladmin.selected = true;
        }
        if (globaladmin.sAMAccountName.toLowerCase().includes(filter.toLowerCase())) {
          results.push(globaladmin.selected = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/teachers-list', {
      controller: 'LMUsersTeachersListController',
      templateUrl: '/lmn_users:resources/partial/teachers-list.html'
    });
  });

  angular.module('lm.users').controller('LMUsersTeachersListController', function($scope, $http, $location, $route, $uibModal, gettext, lmEncodingMap, notify, messagebox, pageTitle, lmFileEditor, lmFileBackups) {
    pageTitle.set(gettext('Teachers'));
    $scope.sorts = [
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.login;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 100
    };
    $scope.fields = {
      last_name: {
        visible: true,
        name: gettext('Last Name')
      },
      first_name: {
        visible: true,
        name: gettext('First Name')
      },
      birthday: {
        visible: true,
        name: gettext('Birthday')
      },
      password: {
        visible: false,
        name: gettext('Desired Password')
      },
      login: {
        visible: true,
        name: gettext('Login')
      }
    };
    $http.get('/api/lm/schoolsettings').then(function(resp) {
      var school;
      school = 'default-school';
      $scope.encoding = resp.data["userfile.teachers.csv"].encoding;
      if ($scope.encoding === 'auto') {
        $http.post('/api/lmn/schoolsettings/determine-encoding', {
          path: '/etc/linuxmuster/sophomorix/' + school + '/teachers.csv'
        }).then(function(response) {
          if (response.data === 'unknown') {
            return $scope.encoding = 'utf-8';
          } else {
            return $scope.encoding = response.data;
          }
        });
      }
      return $http.get(`/api/lm/users/teachers-list?encoding=${$scope.encoding}`).then(function(resp) {
        return $scope.teachers = resp.data;
      });
    });
    $scope.first_save = false;
    $scope.validateField = function(name, val, isnew) {
      var valid;
      valid = $scope["isValid" + name](val) && val;
      if (valid) {
        return "";
      }
      if (isnew && !$scope.first_save) {
        return "has-error-new";
      } else {
        return "has-error";
      }
    };
    $scope.findval = function(attr, val) {
      return function(dict) {
        return dict[attr] === val;
      };
    };
    $scope.isValidLogin = function(login) {
      var regExp, validLogin;
      regExp = /^([0-9a-zA-Z]*)$/;
      validLogin = regExp.test(login) && ($scope.teachers.filter($scope.findval('login', login)).length < 2);
      return true; //# TODO : valid chars for a login ?
    };
    $scope.isStrongPwd = function(password) {
      var regExp, validPassword;
      regExp = /(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*()]|(?=.*\d)).{7,}/;
      validPassword = regExp.test(password);
      return validPassword;
    };
    $scope.validCharPwd = function(password) {
      var regExp, validPassword;
      regExp = /^[a-zA-Z0-9!@#§+\-$%&*{}()\]\[]+$/;
      validPassword = regExp.test(password);
      return validPassword;
    };
    $scope.isValidPassword = function(password) {
      return $scope.validCharPwd(password) && $scope.isStrongPwd(password);
    };
    $scope.isValidName = function(name) {
      var regExp, validName;
      regExp = /^([0-9a-zA-Z]*)$/;
      validName = regExp.test(name);
      return true; //# TODO : valid chars for a name ?
    };
    $scope.isValidBirthday = function(birthday) {
      var regExp, validBirthday;
      regExp = /^(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|20)\d\d$/; //# Not perfect : allows 31.02.1920, but not so important
      validBirthday = regExp.test(birthday);
      return validBirthday;
    };
    $scope.add = function() {
      if ($scope.teachers.length > 0) {
        $scope.paging.page = Math.floor(($scope.teachers.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.filter = '';
      return $scope.teachers.push({
        class: 'Lehrer',
        _isNew: true
      });
    };
    $scope.remove = function(teacher) {
      return $scope.teachers.remove(teacher);
    };
    $scope.editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/teachers.csv', 'ISO8859-1').then(function() {
        return $route.reload();
      });
    };
    $scope.numErrors = function() {
      return document.getElementsByClassName("has-error").length + document.getElementsByClassName("has-error-new").length > 0;
    };
    $scope.save = function() {
      if ($scope.numErrors()) {
        $scope.first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lm/users/teachers-list?encoding=${$scope.encoding}`, $scope.teachers).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.saveAndCheck = function() {
      return $scope.save().then(function() {
        return $uibModal.open({
          templateUrl: '/lmn_users:resources/partial/check.modal.html',
          controller: 'LMUsersCheckModalController',
          backdrop: 'static'
        });
      });
    };
    $scope.backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/teachers.csv', $scope.encoding);
    };
    return $scope.confirmUpload = function() {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/upload.modal.html',
        controller: 'LMUsersUploadModalController',
        backdrop: 'static',
        resolve: {
          userlist: function() {
            return 'teachers.csv';
          }
        }
      });
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/extra-students', {
      controller: 'LMUsersExtraStudentsController',
      templateUrl: '/lmn_users:resources/partial/extra-students.html'
    });
  });

  angular.module('lm.users').controller('LMUsersExtraStudentsController', function($scope, $http, $uibModal, $route, gettext, notify, pageTitle, lmEncodingMap, lmFileEditor, lmFileBackups) {
    pageTitle.set(gettext('Extra Students'));
    $scope.sorts = [
      {
        name: gettext('Class'),
        fx: function(x) {
          return x.class;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.login;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 100
    };
    $scope.first_save = false;
    $scope.validateField = function(name, val, isnew) {
      var valid;
      valid = $scope["isValid" + name](val) && val;
      if (valid) {
        return "";
      }
      if (isnew && !$scope.first_save) {
        return "has-error-new";
      } else {
        return "has-error";
      }
    };
    $scope.findval = function(attr, val) {
      return function(dict) {
        return dict[attr] === val;
      };
    };
    $scope.isValidClass = function(cl) {
      var regExp, validClass;
      regExp = /^([0-9a-zA-Z]*)$/;
      validClass = regExp.test(cl);
      return true; //# TODO : valid chars for a classname ?
    };
    $scope.isValidLogin = function(login) {
      var regExp, validLogin;
      regExp = /^([0-9a-zA-Z]*)$/;
      validLogin = regExp.test(login) && ($scope.students.filter($scope.findval('login', login)).length < 2);
      return true; //# TODO : valid chars for a login ?
    };
    $scope.isValidName = function(name) {
      var regExp, validName;
      regExp = /^([0-9a-zA-Z]*)$/;
      validName = regExp.test(name);
      return true; //# TODO : valid chars for a name ?
    };
    $scope.isValidBirthday = function(birthday) {
      var regExp, validBirthday;
      regExp = /^(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|20)\d\d$/; //# Not perfect : allows 31.02.1920, but not so important
      validBirthday = regExp.test(birthday);
      return validBirthday;
    };
    $http.get('/api/lm/schoolsettings').then(function(resp) {
      $scope.encoding = lmEncodingMap[resp.data.encoding_students_extra] || 'ISO8859-1';
      return $http.get(`/api/lm/users/extra-students?encoding=${$scope.encoding}`).then(function(resp) {
        return $scope.students = resp.data;
      });
    });
    $scope.add = function() {
      if ($scope.students.length > 0) {
        $scope.paging.page = Math.floor(($scope.students.length - 1) / $scope.paging.pageSize) + 1;
      }
      return $scope.students.push({
        _isNew: true
      });
    };
    $scope.remove = function(student) {
      return $scope.students.remove(student);
    };
    $scope.editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/extrastudents.csv', $scope.encoding).then(function() {
        return $route.reload();
      });
    };
    $scope.numErrors = function() {
      return document.getElementsByClassName("has-error").length + document.getElementsByClassName("has-error-new").length > 0;
    };
    $scope.save = function() {
      if ($scope.numErrors()) {
        $scope.first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lm/users/extra-students?encoding=${$scope.encoding}`, $scope.students).then(function() {
        return notify.success('Saved');
      });
    };
    $scope.saveAndCheck = function() {
      return $scope.save().then(function() {
        return $uibModal.open({
          templateUrl: '/lmn_users:resources/partial/check.modal.html',
          controller: 'LMUsersCheckModalController',
          backdrop: 'static'
        });
      });
    };
    return $scope.backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/extrastudents.csv', $scope.encoding);
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/extra-courses', {
      controller: 'LMUsersExtraCoursesController',
      templateUrl: '/lmn_users:resources/partial/extra-courses.html'
    });
  });

  angular.module('lm.users').controller('LMUsersExtraCoursesController', function($scope, $http, $uibModal, $route, notify, gettext, pageTitle, lmEncodingMap, lmFileEditor, lmFileBackups) {
    pageTitle.set(gettext('Extra Courses'));
    $scope.sorts = [
      {
        name: gettext('Course'),
        fx: function(x) {
          return x.course;
        }
      },
      {
        name: gettext('Base name'),
        fx: function(x) {
          return x.base_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Count'),
        fx: function(x) {
          return x.count;
        }
      },
      {
        name: gettext('GECOS'),
        fx: function(x) {
          return x.gecos;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 100
    };
    $http.get('/api/lm/schoolsettings').then(function(resp) {
      $scope.encoding = lmEncodingMap[resp.data.encoding_courses_extra] || 'ISO8859-1';
      return $http.get(`/api/lm/users/extra-courses?encoding=${$scope.encoding}`).then(function(resp) {
        return $scope.courses = resp.data;
      });
    });
    $scope.first_save = false;
    $scope.validateField = function(name, val, isnew) {
      var valid;
      valid = $scope["isValid" + name](val) && val;
      if (valid) {
        return "";
      }
      if (isnew && !$scope.first_save) {
        return "has-error-new";
      } else {
        return "has-error";
      }
    };
    $scope.findval = function(attr, val) {
      return function(dict) {
        return dict[attr] === val;
      };
    };
    $scope.isValidCourse = function(course) {
      var regExp, validCourse;
      regExp = /^([0-9a-zA-Z]*)$/;
      validCourse = regExp.test(course);
      return true; //# TODO : valid chars for a classname ?
    };
    $scope.isValidCount = function(count) {
      var regExp, validCount;
      regExp = /^([0-9]*)$/;
      validCount = regExp.test(count);
      return validCount;
    };
    $scope.isStrongPwd = function(password) {
      var regExp, validPassword;
      regExp = /(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*()]|(?=.*\d)).{7,}/;
      validPassword = regExp.test(password);
      return validPassword;
    };
    $scope.validCharPwd = function(password) {
      var regExp, validPassword;
      regExp = /^[a-zA-Z0-9!@#§+\-$%&*{}()\]\[]+$/;
      validPassword = regExp.test(password);
      return validPassword;
    };
    $scope.isValidPassword = function(password) {
      return $scope.validCharPwd(password) && $scope.isStrongPwd(password);
    };
    $scope.isValidName = function(name) {
      var regExp, validName;
      regExp = /^([0-9a-zA-Z]*)$/;
      validName = regExp.test(name);
      return true; //# TODO : valid chars for a name ?
    };
    $scope.isValidBirthday = function(birthday) {
      var regExp, validBirthday;
      regExp = /^(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|20)\d\d$/; //# Not perfect : allows 31.02.1920, but not so important
      validBirthday = regExp.test(birthday);
      return validBirthday;
    };
    $scope.isValidDate = function(date) {
      var regExp, validDate;
      regExp = /^(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|20)\d\d$/; //# Not perfect : allows 31.02.1920, but not so important
      validDate = regExp.test(date);
      return validDate;
    };
    $scope.add = function() {
      if ($scope.courses.length > 0) {
        $scope.paging.page = Math.floor(($scope.courses.length - 1) / $scope.paging.pageSize) + 1;
      }
      return $scope.courses.push({
        _isNew: true
      });
    };
    $scope.remove = function(course) {
      return $scope.courses.remove(course);
    };
    $scope.editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/extraclasses.csv', $scope.encoding).then(function() {
        return $route.reload();
      });
    };
    $scope.numErrors = function() {
      return document.getElementsByClassName("has-error").length + document.getElementsByClassName("has-error-new").length > 0;
    };
    $scope.save = function() {
      if ($scope.numErrors()) {
        $scope.first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lm/users/extra-courses?encoding=${$scope.encoding}`, $scope.courses).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.saveAndCheck = function() {
      return $scope.save().then(function() {
        return $uibModal.open({
          templateUrl: '/lmn_users:resources/partial/check.modal.html',
          controller: 'LMUsersCheckModalController',
          backdrop: 'static'
        });
      });
    };
    return $scope.backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/extraclasses.csv', $scope.encoding);
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/teachers', {
      controller: 'LMUsersTeachersController',
      templateUrl: '/lmn_users:resources/partial/teachers.html'
    });
  });

  angular.module('lm.users').controller('LMUsersTeachersController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, lmFileEditor, lmEncodingMap) {
    pageTitle.set(gettext('Teachers'));
    $scope.sorts = [
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.givenName;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.sn;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.sAMAccountName;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.sophomorixBirthdate;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $http.post('/api/lm/sophomorixUsers/teachers', {
      action: 'get-all'
    }).then(function(resp) {
      return $scope.teachers = resp.data;
    });
    $scope.showInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'get'
      }).then(function(resp) {
        return $http.post('/api/lm/users/test-first-password/' + user[0]['sAMAccountName']).then(function(response) {
          var msg;
          if (response.data === true) {
            msg = gettext('Initial password (still set)');
          } else {
            msg = gettext('Initial password (changed from user)');
          }
          return messagebox.show({
            title: msg,
            text: resp.data,
            positive: 'OK'
          });
        });
      });
    };
    $scope.setInitialPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-initial'
      }).then(function(resp) {
        return notify.success(gettext('Initial password set'));
      });
    };
    $scope.setRandomPassword = function(user) {
      var x;
      return $http.post('/api/lm/users/password', {
        users: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })(),
        action: 'set-random'
      }).then(function(resp) {
        return notify.success(gettext('Random password set'));
      });
    };
    $scope.setCustomPassword = function(user, type) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/customPassword.modal.html',
        controller: 'LMNUsersCustomPasswordController',
        size: 'mg',
        resolve: {
          users: function() {
            return user;
          },
          type: function() {
            return type;
          }
        }
      });
    };
    $scope.userInfo = function(user) {
      console.log(user);
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'teachers';
          }
        }
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.teachers) {
        ref = $scope.teachers;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    $scope.batchSetInitialPassword = function() {
      var x;
      return $scope.setInitialPassword((function() {
        var i, len, ref, results;
        ref = $scope.teachers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetRandomPassword = function() {
      var x;
      return $scope.setRandomPassword((function() {
        var i, len, ref, results;
        ref = $scope.teachers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    $scope.batchSetCustomPassword = function() {
      var x;
      return $scope.setCustomPassword((function() {
        var i, len, ref, results;
        ref = $scope.teachers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            results.push(x);
          }
        }
        return results;
      })());
    };
    return $scope.selectAll = function(filter) {
      var i, len, ref, results, teacher;
      if (filter == null) {
        filter = '';
      }
      ref = $scope.teachers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        teacher = ref[i];
        if (filter === void 0) {
          teacher.selected = true;
        }
        if (teacher.sn.toLowerCase().includes(filter.toLowerCase())) {
          teacher.selected = true;
        }
        if (teacher.givenName.toLowerCase().includes(filter.toLowerCase())) {
          teacher.selected = true;
        }
        if (teacher.sophomorixAdminClass.toLowerCase().includes(filter.toLowerCase())) {
          teacher.selected = true;
        }
        if (teacher.sAMAccountName.toLowerCase().includes(filter.toLowerCase())) {
          results.push(teacher.selected = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/print-passwords', {
      controller: 'LMUsersPrintPasswordsController',
      templateUrl: '/lmn_users:resources/partial/print-passwords.html'
    });
  });

  angular.module('lm.users').controller('LMUsersPrintPasswordsOptionsModalController', function($scope, $uibModalInstance, $http, messagebox, gettext, schoolclass, classes, user) {
    $scope.options = {
      format: 'pdf',
      one_per_page: false,
      pdflatex: false,
      schoolclass: schoolclass,
      user: user
    };
    if ($scope.options.user === 'root') {
      $scope.options.user = 'global-admin';
    }
    $scope.title = schoolclass !== '' ? gettext("Class") + `: ${schoolclass}` : gettext('All users');
    $scope.print = function() {
      var msg;
      msg = messagebox.show({
        progress: true
      });
      return $http.post('/api/lm/users/print', $scope.options).then(function(resp) {
        location.href = `/api/lm/users/print-download/${(schoolclass !== '' ? schoolclass : 'add')}-${$scope.options.user}.${($scope.options.format === 'pdf' ? 'pdf' : 'csv')}`;
        return $uibModalInstance.close();
      }).finally(function() {
        return msg.close();
      });
    };
    return $scope.cancel = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lm.users').controller('LMUsersPrintPasswordsController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, lmFileEditor) {
    pageTitle.set(gettext('Print Passwords'));
    $http.get('/api/lm/users/print').then(function(resp) {
      $scope.classes = resp.data;
      return console.log($scope.classes);
    });
    return $scope.select = function(schoolclass, user) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/print-passwords.options.modal.html',
        controller: 'LMUsersPrintPasswordsOptionsModalController',
        resolve: {
          schoolclass: function() {
            return schoolclass;
          },
          classes: function() {
            return $scope.classes;
          },
          user: function() {
            return user;
          }
        }
      });
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').controller('LMUsersCheckResultsModalController', function($scope, $uibModalInstance, $uibModal, data) {
    $scope.data = data;
    $scope._ = {
      doAdd: data['SUMMARY'][1]['ADD']['RESULT'] > 0,
      doMove: data['SUMMARY'][2]['UPDATE']['RESULT'] > 0,
      doKill: data['SUMMARY'][3]['KILL']['RESULT'] > 0
    };
    //# Use same string status for, e.g., Removable and Killable ?
    $scope.user_status = {
      'U': 'Usable (U)',
      'A': 'Activated (A)',
      'E': 'Enabled (E)',
      'S': 'Self-activated (S)',
      'P': 'Permanent (P)',
      'T': 'Tolerated (T)',
      'L': 'Locked (L)',
      'D': 'Deactivated (D)',
      'F': 'Frozen (F)',
      'R': 'Removable (R)',
      'K': 'Killable (K)'
    };
    $scope.status_filter = function(status) {
      if ($scope.user_status[status] === void 0) {
        return status;
      } else {
        return $scope.user_status[status];
      }
    };
    $scope.apply = function() {
      var msg;
      $uibModalInstance.close();
      msg = $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/apply.modal.html',
        controller: 'LMUsersApplyModalController',
        backdrop: 'static',
        size: 'lg',
        resolve: {
          params: function() {
            return $scope._;
          }
        }
      });
      return $uibModalInstance.close();
    };
    return $scope.cancel = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lm.users').controller('LMUsersApplyModalController', function($scope, $uibModalInstance, $http, $route, gettext, notify, params) {
    $scope.options = {
      autoscroll: true
    };
    $scope.close = function() {
      return $uibModalInstance.close();
    };
    $scope.isWorking = true;
    return $http.post('/api/lm/users/apply', params).then(function(resp) {
      $scope.isWorking = false;
      notify.success(gettext('Changes applied'));
      return $route.reload();
    }).catch(function(resp) {
      $scope.isWorking = false;
      return notify.error(gettext('Failed'), resp.data.message);
    });
  });

  angular.module('lm.users').controller('LMUsersCheckModalController', function($scope, $http, notify, $uibModalInstance, $uibModal, gettext) {
    $scope.isWorking = true;
    $http.get('/api/lm/users/check').then(function(resp) {
      if (resp.data['OUTPUT'][0]['TYPE'] === 'ERROR') {
        notify.error(gettext('Check failed'), resp.data.message);
        $scope.isWorking = false;
        $scope.error = true;
        return $scope.errorMessage = resp.data['OUTPUT'][0]['MESSAGE_EN'];
      } else {
        $scope.showCheckResults(resp.data);
        return $uibModalInstance.close();
      }
    }).catch(function(resp) {
      $scope.isWorking = false;
      $scope.error = true;
      return notify.error(gettext('Check failed'), resp.data.message);
    });
    $scope.showCheckResults = function(data) {
      $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/result.modal.html',
        controller: 'LMUsersCheckResultsModalController',
        resolve: {
          data: function() {
            return data;
          }
        }
      });
      return console.log(data);
    };
    return $scope.close = function() {
      return $uibModalInstance.close();
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  var isStrongPwd1;

  isStrongPwd1 = function(password) {
    var regExp, validPassword;
    regExp = /(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*()]|(?=.*\d)).{7,}/;
    validPassword = regExp.test(password);
    return validPassword;
  };

  angular.module('lm.users').controller('LMNUsersCustomPasswordController', function($scope, $uibModal, $uibModalInstance, $http, gettext, notify, messagebox, pageTitle, users, type) {
    $scope.username = users;
    $scope.action = type;
    $scope.save = function(userpw) {
      var action, x;
      if (type == null) {
        action = 'set';
      } else {
        if (type === 'actual') {
          action = 'set-actual';
        } else {
          action = 'set';
        }
      }
      if (!$scope.userpw) {
        notify.error(gettext("You have to enter a password"));
        return;
      }
      if (!isStrongPwd1($scope.userpw)) {
        notify.error(gettext("Password too weak"));
        return;
      } else {
        $http.post('/api/lm/users/password', {
          users: (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = users.length; j < len; j++) {
              x = users[j];
              results.push(x['sAMAccountName']);
            }
            return results;
          })(),
          action: action,
          password: $scope.userpw,
          type: type
        }).then(function(resp) {
          return notify.success(gettext('New password set'));
        });
      }
      return $uibModalInstance.dismiss();
    };
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lm.users').controller('LMNUserDetailsController', function($scope, $route, $uibModal, $uibModalInstance, $http, gettext, notify, messagebox, pageTitle, id, role) {
    //notify.error gettext("You have to enter a username")
    $scope.id = id;
    $scope.showGroupDetails = true;
    $scope.nevertext = gettext('Never');
    $scope.formatDate = function(date) {
      var day, hour, min, month, sec, year;
      if (date === "19700101000000.0Z") {
        return $scope.nevertext;
      } else if (date === void 0) {
        return "undefined";
      } else {
        // Sophomorix date format is yyyyMMddhhmmss.0Z
        year = date.slice(0, 4);
        month = +date.slice(4, 6) - 1; // Month start at 0
        day = date.slice(6, 8);
        hour = date.slice(8, 10);
        min = date.slice(10, 12);
        sec = date.slice(12, 14);
        return new Date(year, month, day, hour, min, sec);
      }
    };
    $scope.hidetext = gettext("Hide");
    $scope.showtext = gettext("Show");
    $http.post('/api/lm/sophomorixUsers/' + role, {
      action: 'get-specified',
      user: id
    }).then(function(resp) {
      var category, cn, dn, j, len, ref;
      $scope.userDetails = resp.data;
      $scope.groups = [];
      ref = $scope.userDetails[0]['memberOf'];
      for (j = 0, len = ref.length; j < len; j++) {
        dn = ref[j];
        cn = dn.split(',')[0].split('=')[1];
        category = dn.split(',')[1].split('=')[1];
        $scope.groups.push({
          'cn': cn,
          'category': category
        });
      }
      return console.log($scope.userDetails);
    });
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lm.users').controller('LMUsersSortListModalController', function($scope, $window, $http, $uibModalInstance, messagebox, notify, $uibModal, gettext, filesystem, userlist, userListCSV) {
    $scope.userListCSV = userListCSV;
    $scope.userlist = userlist;
    $scope.rebuildCSV = function() {
      var element, i, j, len, ref, results;
      // add empty 'not used' fields if CSV contains more coloumns than fields
      while ($scope['userListCSV'].length > $scope['coloumnTitles'].length) {
        $scope['coloumnTitles'].push({
          name: gettext('not used')
        });
      }
      i = 0;
      ref = $scope.userListCSV;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        element = ref[j];
        element.coloumn = $scope.coloumnTitles[i]['id'];
        results.push(i = i + 1);
      }
      return results;
    };
    //console.log ($scope['userListCSV'])
    $scope.togglecustomField = function(field) {
      var pos;
      // get index of field in coloumnTitles (-1 if not presend)
      pos = $scope.coloumnTitles.map(function(e) {
        return e.name;
      }).indexOf(field);
      // add field if not presend
      if (pos === -1) {
        $scope.coloumnTitles.splice(4, 0, {
          name: field,
          id: field
        });
      } else {
        // splice this field 
        $scope.coloumnTitles.splice(pos, 1);
      }
      return $scope.rebuildCSV();
    };
    $scope.accept = function() {
      //console.log ($scope.userListCSV)
      return $uibModalInstance.close($scope.userListCSV);
    };
    $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
    if (userlist === 'students.csv') {
      $scope.coloumnTitles = [
        {
          name: gettext('class'),
          id: 'class'
        },
        {
          name: gettext('lastname'),
          id: 'lastname'
        },
        {
          name: gettext('firstname'),
          id: 'firstname'
        },
        {
          name: gettext('birthday'),
          id: 'birthday'
        }
      ];
    }
    if (userlist === 'teachers.csv') {
      $scope.coloumnTitles = [
        {
          name: gettext('lastname'),
          id: 'lastname'
        },
        {
          name: gettext('firstname'),
          id: 'firstname'
        },
        {
          name: gettext('birthday'),
          id: 'birthday'
        },
        {
          name: gettext('login'),
          id: 'login'
        }
      ];
    }
    return $scope.rebuildCSV();
  });

  angular.module('lm.users').controller('LMUsersUploadModalController', function($scope, $window, $http, $uibModalInstance, messagebox, notify, $uibModal, gettext, filesystem, userlist) {
    $scope.path = "/tmp/";
    $scope.onUploadBegin = function($flow) {
      var msg;
      $uibModalInstance.close();
      msg = messagebox.show({
        progress: true
      });
      return filesystem.startFlowUpload($flow, $scope.path).then(function() {
        var filename;
        notify.success(gettext('Uploaded'));
        filename = $flow["files"][0]["name"];
        return $http.post('/api/lmn/sophomorixUsers/import-list', {
          action: 'get',
          path: $scope.path + filename,
          userlist: userlist
        }).then(function(resp) {
          var userListCSV;
          userListCSV = resp.data;
          //console.log (userListCSV)
          // console.log (resp['data'])
          $uibModal.open({
            templateUrl: '/lmn_users:resources/partial/sortList.modal.html',
            controller: 'LMUsersSortListModalController',
            resolve: {
              userListCSV: function() {
                return userListCSV;
              },
              userlist: function() {
                return userlist;
              }
            }
          }).result.then(function(result) {
            //console.log (result)
            return $http.post("/api/lmn/sophomorixUsers/import-list", {
              action: 'save',
              data: result,
              userlist: userlist
            }).then(function(resp) {
              //console.log (resp['data'])
              if (resp['data'][0] === 'ERROR') {
                notify.error(resp['data'][1]);
              }
              if (resp['data'][0] === 'LOG') {
                notify.success(gettext(resp['data'][1]));
              }
              // TODO: it would be better to reload just the content frame. Currently I dont know how to set the route to reload it
              $window.location.reload();
              msg.close();
              return notify.success(gettext('Saved'));
            });
          });
          return msg.close();
        });
      }, null, function(progress) {
        return msg.messagebox.title = `Uploading: ${Math.floor(100 * progress)}%`;
      });
    };
    return $scope.close = function() {
      return $uibModalInstance.close();
    };
  });

  angular.module('lm.users').controller('LMNUsersAddAdminController', function($scope, $route, $uibModal, $uibModalInstance, $http, gettext, notify, messagebox, pageTitle, role) {
    $scope.role = role;
    $scope.save = function(username) {
      if (!$scope.username) {
        notify.error(gettext("You have to enter a username"));
      } else {
        notify.success(gettext('Adding administrator...'));
        $http.post('/api/lm/users/change-' + role, {
          action: 'create',
          users: username
        }).then(function(resp) {
          // console.log (resp.data)
          if (resp['data'][0] === 'ERROR') {
            notify.error(resp['data'][1]);
          }
          if (resp['data'][0] === 'LOG') {
            notify.success(gettext(resp['data'][1]));
          }
          return $route.reload();
        });
        return $uibModalInstance.dismiss();
      }
    };
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

}).call(this);

// Generated by CoffeeScript 2.4.1
(function() {
  angular.module('lm.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/users/listmanagement', {
      controller: 'LMUsersListManagementController',
      templateUrl: '/lmn_users:resources/partial/listmanagement.html'
    });
  });

  angular.module('lm.users').controller('LMUsersListManagementController', function($scope, $http, $location, $route, $uibModal, gettext, notify, lmEncodingMap, messagebox, pageTitle, lmFileEditor, lmFileBackups, filesystem) {
    pageTitle.set(gettext('Listmanagement'));
    $scope.students_sorts = [
      {
        name: gettext('Class'),
        fx: function(x) {
          return x.class;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Student ID'),
        fx: function(x) {
          return x.id;
        }
      }
    ];
    $scope.teachers_sorts = [
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.login;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.login;
        }
      }
    ];
    $scope.extrastudents_sorts = [
      {
        name: gettext('Class'),
        fx: function(x) {
          return x.class;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.login;
        }
      }
    ];
    $scope.courses_sorts = [
      {
        name: gettext('Course'),
        fx: function(x) {
          return x.course;
        }
      },
      {
        name: gettext('Base name'),
        fx: function(x) {
          return x.base_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Count'),
        fx: function(x) {
          return x.count;
        }
      },
      {
        name: gettext('GECOS'),
        fx: function(x) {
          return x.gecos;
        }
      }
    ];
    $scope.students_sort = $scope.students_sorts[0];
    $scope.teachers_sort = $scope.teachers_sorts[0];
    $scope.extrastudents_sort = $scope.students_sorts[0];
    $scope.courses_sort = $scope.teachers_sorts[0];
    $scope.paging = {
      page: 1
    };
    ({
      pageSize: 100
    });
    $scope.students_fields = {
      class: {
        visible: true,
        name: gettext('Class')
      },
      last_name: {
        visible: true,
        name: gettext('Last Name')
      },
      first_name: {
        visible: true,
        name: gettext('First Name')
      },
      birthday: {
        visible: true,
        name: gettext('Birthday')
      },
      id: {
        visible: false,
        name: gettext('Student ID')
      }
    };
    $scope.teachers_fields = {
      last_name: {
        visible: true,
        name: gettext('Last Name')
      },
      first_name: {
        visible: true,
        name: gettext('First Name')
      },
      birthday: {
        visible: true,
        name: gettext('Birthday')
      },
      password: {
        visible: false,
        name: gettext('Desired Password')
      },
      login: {
        visible: true,
        name: gettext('Login')
      }
    };
    $scope.extrastudents_fields = {
      class: {
        visible: true,
        name: gettext('Class')
      },
      last_name: {
        visible: true,
        name: gettext('Last Name')
      },
      first_name: {
        visible: true,
        name: gettext('First Name')
      },
      birthday: {
        visible: true,
        name: gettext('Birthday')
      },
      login: {
        visible: true,
        name: gettext('Login')
      }
    };
    $scope.teachers_first_save = false;
    $scope.students_first_save = false;
    $scope.extrastudents_first_save = false;
    $scope.courses = false;
    $scope.students_add = function() {
      if ($scope.students.length > 0) {
        $scope.paging.page = Math.floor(($scope.students.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.students_filter = '';
      return $scope.students.push({
        '_isNew': true,
        'first_name': '',
        'last_name': '',
        'class': ''
      });
    };
    $scope.teachers_add = function() {
      if ($scope.teachers.length > 0) {
        $scope.paging.page = Math.floor(($scope.teachers.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.teachers_filter = '';
      return $scope.teachers.push({
        class: 'Lehrer',
        _isNew: true
      });
    };
    $scope.extrastudents_add = function() {
      if ($scope.extrastudents.length > 0) {
        $scope.paging.page = Math.floor(($scope.extrastudents.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.extrastudents_filter = '';
      return $scope.extrastudents.push({
        _isNew: true
      });
    };
    $scope.courses_add = function() {
      if ($scope.courses.length > 0) {
        $scope.paging.page = Math.floor(($scope.courses.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.courses_filter = '';
      return $scope.courses.push({
        _isNew: true
      });
    };
    $scope.students_remove = function(student) {
      return $scope.students.remove(student);
    };
    $scope.teachers_remove = function(teacher) {
      return $scope.teachers.remove(teacher);
    };
    $scope.extrastudents_remove = function(student) {
      return $scope.extrastudents.remove(student);
    };
    $scope.courses_remove = function(course) {
      return $scope.courses.remove(course);
    };
    $scope.getstudents = function() {
      return $http.get('/api/lm/schoolsettings').then(function(resp) {
        var school;
        school = 'default-school';
        $scope.students_encoding = resp.data["userfile.students.csv"].encoding;
        if ($scope.students_encoding === 'auto') {
          $http.post('/api/lmn/schoolsettings/determine-encoding', {
            path: '/etc/linuxmuster/sophomorix/' + school + '/students.csv'
          }).then(function(response) {
            if (response.data === 'unknown') {
              return $scope.students_encoding = 'utf-8';
            } else {
              return $scope.students_encoding = response.data;
            }
          });
        }
        return $http.get(`/api/lm/users/students-list?encoding=${$scope.students_encoding}`).then(function(resp) {
          return $scope.students = resp.data;
        });
      });
    };
    $scope.getteachers = function() {
      return $http.get('/api/lm/schoolsettings').then(function(resp) {
        var school;
        school = 'default-school';
        $scope.teachers_encoding = resp.data["userfile.teachers.csv"].encoding;
        if ($scope.teachers_encoding === 'auto') {
          $http.post('/api/lmn/schoolsettings/determine-encoding', {
            path: '/etc/linuxmuster/sophomorix/' + school + '/teachers.csv'
          }).then(function(response) {
            if (response.data === 'unknown') {
              return $scope.teachers_encoding = 'utf-8';
            } else {
              return $scope.teachers_encoding = response.data;
            }
          });
        }
        return $http.get(`/api/lm/users/teachers-list?encoding=${$scope.students_encoding}`).then(function(resp) {
          return $scope.teachers = resp.data;
        });
      });
    };
    $scope.getextrastudents = function() {
      return $http.get('/api/lm/schoolsettings').then(function(resp) {
        var school;
        school = 'default-school';
        $scope.extrastudents_encoding = resp.data["userfile.extrastudents.csv"].encoding;
        if ($scope.extrastudents_encoding === 'auto') {
          $http.post('/api/lmn/schoolsettings/determine-encoding', {
            path: '/etc/linuxmuster/sophomorix/' + school + '/extrastudents.csv'
          }).then(function(response) {
            if (response.data === 'unknown') {
              return $scope.extrastudents_encoding = 'utf-8';
            } else {
              return $scope.extrastudents_encoding = response.data;
            }
          });
        }
        return $http.get(`/api/lm/users/extra-students?encoding=${$scope.extrastudents_encoding}`).then(function(resp) {
          return $scope.extrastudents = resp.data;
        });
      });
    };
    $scope.getcourses = function() {
      return $http.get('/api/lm/schoolsettings').then(function(resp) {
        $scope.courses_encoding = lmEncodingMap[resp.data.encoding_courses_extra] || 'ISO8859-1';
        return $http.get(`/api/lm/users/extra-courses?encoding=${$scope.courses_encoding}`).then(function(resp) {
          return $scope.courses = resp.data;
        });
      });
    };
    $scope.students_editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/students.csv', $scope.students_encoding).then(function() {
        return $route.reload();
      });
    };
    $scope.teachers_editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/teachers.csv', $scope.students_encoding).then(function() {
        return $route.reload();
      });
    };
    $scope.extrastudents_editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/extrastudents.csv', $scope.extrastudents_encoding).then(function() {
        return $route.reload();
      });
    };
    $scope.courses_editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/extraclasses.csv', $scope.courses_encoding).then(function() {
        return $route.reload();
      });
    };
    $scope.students_save = function() {
      if ($scope.numErrors()) {
        $scope.students_first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lm/users/students-list?encoding=${$scope.students_encoding}`, $scope.students).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.teachers_save = function() {
      if ($scope.numErrors()) {
        $scope.teachers_first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lm/users/teachers-list?encoding=${$scope.teachers_encoding}`, $scope.teachers).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.extrastudents_save = function() {
      if ($scope.numErrors()) {
        $scope.extrastudents_first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lm/users/extra-students?encoding=${$scope.extrastudents_encoding}`, $scope.extrastudents).then(function() {
        return notify.success('Saved');
      });
    };
    $scope.courses_save = function() {
      if ($scope.numErrors()) {
        $scope.first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lm/users/extra-courses?encoding=${$scope.courses_encoding}`, $scope.courses).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.students_confirmUpload = function() {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/upload.modal.html',
        controller: 'LMUsersUploadModalController',
        backdrop: 'static',
        resolve: {
          userlist: function() {
            return 'students.csv';
          }
        }
      });
    };
    $scope.teachers_confirmUpload = function() {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/upload.modal.html',
        controller: 'LMUsersUploadModalController',
        backdrop: 'static',
        resolve: {
          userlist: function() {
            return 'teachers.csv';
          }
        }
      });
    };
    $scope.students_backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/students.csv', $scope.students_encoding);
    };
    $scope.teachers_backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/teachers.csv', $scope.teachers_encoding);
    };
    $scope.extrastudents_backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/extrastudents.csv', $scope.extrastudents_encoding);
    };
    $scope.courses_backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/extraclasses.csv', $scope.courses_encoding);
    };
    // general functions
    $scope.validateField = function(name, val, isnew) {
      var valid;
      valid = $scope["isValid" + name](val) && val;
      if (valid) {
        return "";
      }
      if (isnew && !$scope.first_save) {
        return "has-error-new";
      } else {
        return "has-error";
      }
    };
    $scope.findval = function(attr, val) {
      return function(dict) {
        return dict[attr] === val;
      };
    };
    $scope.isValidLogin = function(login) {
      var regExp, validLogin;
      regExp = /^([0-9a-zA-Z]*)$/;
      validLogin = regExp.test(login) && ($scope.teachers.filter($scope.findval('login', login)).length < 2);
      return true; //# TODO : valid chars for a login ?
    };
    $scope.isValidLoginExtrastudent = function(login) {
      var regExp, validLogin;
      regExp = /^([0-9a-zA-Z]*)$/;
      validLogin = regExp.test(login) && ($scope.extrastudents.filter($scope.findval('login', login)).length < 2);
      return true; //# TODO : valid chars for a login ?
    };
    $scope.isStrongPwd = function(password) {
      var regExp, validPassword;
      regExp = /(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*()]|(?=.*\d)).{7,}/;
      validPassword = regExp.test(password);
      return validPassword;
    };
    $scope.validCharPwd = function(password) {
      var regExp, validPassword;
      regExp = /^[a-zA-Z0-9!@#§+\-$%&*{}()\]\[]+$/;
      validPassword = regExp.test(password);
      return validPassword;
    };
    $scope.isValidPassword = function(password) {
      return $scope.validCharPwd(password) && $scope.isStrongPwd(password);
    };
    $scope.isValidClass = function(cl) {
      var regExp, validClass;
      regExp = /^([0-9a-zA-Z]*)$/;
      validClass = regExp.test(cl);
      return true; //# TODO : valid chars for a classname ?
    };
    $scope.isValidName = function(name) {
      var regExp, validName;
      regExp = /^([0-9a-zA-Z]*)$/;
      validName = regExp.test(name);
      return true; //# TODO : valid chars for a name ?
    };
    $scope.isValidBirthday = function(birthday) {
      var regExp, validBirthday;
      regExp = /^(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|20)\d\d$/; //# Not perfect : allows 31.02.1920, but not so important
      validBirthday = regExp.test(birthday);
      return validBirthday;
    };
    $scope.isValidCourse = function(course) {
      var regExp, validCourse;
      regExp = /^([0-9a-zA-Z]*)$/;
      validCourse = regExp.test(course);
      return true; //# TODO : valid chars for a classname ?
    };
    $scope.isValidCount = function(count) {
      var regExp, validCount;
      regExp = /^([0-9]*)$/;
      validCount = regExp.test(count);
      return validCount;
    };
    $scope.isValidDate = function(date) {
      var regExp, validDate;
      regExp = /^(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|20)\d\d$/; //# Not perfect : allows 31.02.1920, but not so important
      validDate = regExp.test(date);
      return validDate;
    };
    $scope.numErrors = function() {
      return document.getElementsByClassName("has-error").length + document.getElementsByClassName("has-error-new").length > 0;
    };
    $scope.saveAndCheck = function(name) {
      //valid = $scope["isValid"+name](val) && val
      return $scope[name + "_save"]().then(function() {
        return $uibModal.open({
          templateUrl: '/lmn_users:resources/partial/check.modal.html',
          controller: 'LMUsersCheckModalController',
          backdrop: 'static'
        });
      });
    };
    // TODO: Do this on tab open
    // TODO: Add paging
    $scope.getstudents();
    $scope.getteachers();
    $scope.getextrastudents();
    return $scope.getcourses();
  });

}).call(this);

